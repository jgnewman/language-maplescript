'scopeName': 'source.maplescript'
'fileTypes': [
  'maple'
  'maplescript'
  'mpl'
]
'foldingStartMarker': '\\(\\s*$'
'foldingStopMarker': '^\\s*\\)'
'firstLineMatch': '''(?x)
  # Hashbang
  ^\\#!.*(?:\\s|\\/)
    boot
  (?:$|\\s)
  |
  # Modeline
  (?i:
    # Emacs
    -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
      maplescript(script)?
    (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
    |
    # Vim
    (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
      maplescript
    (?=\\s|:|$)
  )
'''
'name': 'MapleScript'
'patterns': [
  {
    'include': '#multicomment'
  }
  {
    'include': '#comment'
  }
  {
    'include': '#html'
  }
  {
    'include': '#vardef'
  }
  {
    'include': '#sexp'
  }
  {
    'include': '#keyfn'
  }
  {
    'include': '#singlestring'
  }
  {
    'include': '#doublestring'
  }
  {
    'include': '#backtickstring'
  }
  {
    'include': '#vector'
  }
  {
    'include': '#map'
  }
  {
    'include': '#regexp'
  }
  {
    'include': '#constants'
  }
  {
    'include': '#symbol'
  }
]
'repository':
  'comment':
    # NOTE: This must be kept as a begin/end match for language-todo to work
    'begin': '(?<!\\\\)\\#'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.comment.maplescript'
    'end': '$'
    'name': 'comment.line.semicolon.maplescript'
  'constants':
    'patterns': [
      {
        'match': '(\\:\\:)'
        'name': 'keyword.control.maplescript'
      }
      {
        'match': '(null|undefined)(?=(\\s|\\)|\\]|\\}))'
        'name': 'constant.language.nil.maplescript'
      }
      {
        'match': '(true|false)'
        'name': 'constant.language.boolean.maplescript'
      }
      {
        'match': '(-?\\d+/\\d+)'
        'name': 'constant.numeric.ratio.maplescript'
      }
      {
        'match': '(-?\\d+[rR][0-9a-zA-Z]+)'
        'name': 'constant.numeric.arbitrary-radix.maplescript'
      }
      {
        'match': '(-?0[xX][0-9a-fA-F]+)'
        'name': 'constant.numeric.hexadecimal.maplescript'
      }
      {
        'match': '(-?0\\d+)'
        'name': 'constant.numeric.octal.maplescript'
      }
      {
        'match': '(-?\\d+\\.\\d+([eE][+-]?\\d+)?M)'
        'name': 'constant.numeric.bigdecimal.maplescript'
      }
      {
        'match': '(-?\\d+N)'
        'name': 'constant.numeric.bigint.maplescript'
      }
      { # catchall numeric
        'match': '(-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?)'
        'name': 'constant.numeric.double.maplescript'
      }
      {
        'match': '(-?\\d+)'
        'name': 'constant.numeric.long.maplescript'
      }
      { # separating the pattern for reuse
        'include': '#keyword'
      }
    ]
  'keyword':
    'match': '(?<=(\\s|\\(|\\[|\\{)):[a-zA-Z0-9\\.\\-\\_\\:\\+\\=\\>\\<\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}|\\,))'
    'name': 'constant.keyword.maplescript'
  'vardef':
    'match': '(make)\\s+([A-Za-z0-9_\\$]+)'
    'captures':
      '1':
        'name': 'keyword.control.maplescript'
      '2':
        'name': 'meta.symbol.maplescript'
  'keyfn':
    'patterns': [
      {
        'match': '(?<=(\\s|\\(|\\[|\\{))(-\\>|\\>\\>\\=|async|await|destr|do|export|fn|if|import|of)(?=(\\s|\\)|\\]|\\}))'
        'name': 'keyword.control.maplescript'
      }
    ]
  'map':
    'begin': '(\\{)'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.map.begin.maplescript'
    'end': '(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})'
    'endCaptures':
      '1':
        'name': 'punctuation.section.map.end.trailing.maplescript'
      '2':
        'name': 'punctuation.section.map.end.maplescript'
    'name': 'meta.map.maplescript'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'html':
    'begin': '(\\<\\/?)([A-Za-z0-9_\\$\\-]+)'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.html.begin.maplescript'
      '2':
        'name': 'entity.name.function.maplescript'
    'end': '(\\/?\\>)'
    'endCaptures':
      '1':
        'name': 'punctuation.section.html.end.maplescript'
    'name': 'meta.map.maplescript'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'regexp':
    'match': '\\/([^\\/\\n\\r]|\\/)+\\/[gim]*'
    'name': 'string.regexp.maplescript'
  'sexp':
    'begin': '(\\()'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.expression.begin.maplescript'
    'end': '(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.section.expression.end.trailing.maplescript'
      '2':
        'name': 'punctuation.section.expression.end.trailing.maplescript'
      '3':
        'name': 'punctuation.section.expression.end.maplescript'
    'name': 'meta.expression.maplescript'
    'patterns': [
      {
        'include': '#vardef'
      }
      {
        'include': '#keyfn'
      }
      {
        'include': '#constants'
      }
      {
        'include': '#vector'
      }
      {
        'include': '#map'
      }
      {
        'include': '#sexp'
      }
      {
        'match': '(?<=\\()(.+?)(?=\\s|\\))'
        'captures':
          '1':
            'name': 'entity.name.function.maplescript'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'include': '$self'
      }
    ]
  'doublestring':
    'begin': '(?<!\\\\)(")'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.string.begin.maplescript'
    'end': '(")'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.string.end.maplescript'
    'name': 'string.quoted.double.maplescript'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.maplescript'
      }
    ]
  'singlestring':
    'begin': '(?<!\\\\)(\')'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.string.begin.maplescript'
    'end': '(\')'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.string.end.maplescript'
    'name': 'string.quoted.single.maplescript'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.maplescript'
      }
    ]
  'backtickstring':
    'begin': '(?<!\\\\)(\`)'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.string.begin.maplescript'
    'end': '(\`)'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.string.end.maplescript'
    'name': 'string.quoted.single.maplescript'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.maplescript'
      },
      {
        'begin': '\\$\\{'
        'end': '\\}'
        'name': 'meta.interpolation.maplescript'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]
  'multicomment':
    'begin': '(?<!\\\\)(\\#\\#\\#)'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.comment.maplescript'
    'end': '(\\#\\#\\#)'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.comment.maplescript'
    'name': 'punctuation.definition.comment.maplescript'
  'symbol':
    'patterns': [
      {
        'match': '([@\\w\\_\\$][\\w\\_\\$\\d]*)'
        'name': 'meta.variable.maplescript' # was meta.symbol.maplescript
      }
    ]
  'vector':
    'begin': '(\\[)'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.vector.begin.maplescript'
    'end': '(\\](?=[\\}\\]\\)\\s]*(?:;|$)))|(\\])'
    'endCaptures':
      '1':
        'name': 'punctuation.section.vector.end.trailing.maplescript'
      '2':
        'name': 'punctuation.section.vector.end.maplescript'
    'name': 'meta.vector.maplescript'
    'patterns': [
      {
        'include': '$self'
      }
    ]
